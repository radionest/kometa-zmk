#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

/ {
};

/ {
    behaviors {
        hr: hr {
            compatible = "zmk,behavior-hold-tap";
            label = "home_row";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
        };

        copy: copy {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY";
            #binding-cells = <0>;
            bindings = <&kp C>, <&kp K_COPY>;
        };

        paste: paste {
            compatible = "zmk,behavior-tap-dance";
            label = "PASTE";
            #binding-cells = <0>;
            bindings = <&kp V>, <&kp INSERT>;
        };

        SYM_or_tap: SYM_or_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SYM_OR_TAP";
            bindings = <&change_lang_and_goto_SYM>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };

        ESC_or_TILDA: ESC_or_TILDA {
            compatible = "zmk,behavior-mod-morph";
            label = "ESC_OR_TILDA";
            bindings = <&kp ESC>, <&kp LS(GRAVE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        ALT_if_CTRL_else_TAB: ALT_if_CTRL_else_TAB {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_IF_CTRL_ELSE_TAB";
            bindings = <&kp TAB>, <&kp LEFT_ALT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ALT: ALT {
            compatible = "zmk,behavior-hold-tap";
            label = "ALT";
            bindings = <&mt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            retro-tap;
            hold-trigger-key-positions = <4 28 5 34>;
        };

        ALTTAB_or_R: ALTTAB_or_R {
            compatible = "zmk,behavior-mod-morph";
            label = "ALTTAB_OR_R";
            bindings = <&kp R>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        SHIFT_ALTTAB_or_V: SHIFT_ALTTAB_or_V {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_ALTTAB_OR_V";
            bindings = <&kp V>, <&kp LS(TAB)>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };
    };

    macros {
        change_lang_and_goto_SYM: change_lang_and_goto_SYM {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LA(RIGHT_SHIFT)>,
                <&macro_press>,
                <&mo 4>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 4>,
                <&macro_tap>,
                <&kp LA(LEFT_SHIFT)>;

            label = "CHANGE_LANG_AND_GOTO_SYM";
        };

        lang_eng: lang_eng {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT_SHIFT) &to 1>;
            label = "LANG_ENG";
        };

        lang_ru: lang_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT_SHIFT) &to 0>;
            label = "LANG_RU";
        };

        del_end: del_end {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(END) &kp DEL>;
            label = "DEL_END";
        };

        del_home: del_home {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(HOME) &kp DEL>;
            label = "DEL_HOME";
        };

        tog_lang: tog_lang {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp LA(LEFT_SHIFT) &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&kp LA(LEFT_SHIFT)>;

            label = "TOG_LANG";
        };
    };

    combos {
        compatible = "zmk,combos";

        goto_ADJ {
            bindings = <&mo 6>;
            key-positions = <31 41>;
        };

        toggle_RU_ENG {
            bindings = <&tog 0>;
            key-positions = <33 34>;
        };

        printscreen {
            bindings = <&kp LS(LG(S))>;
            key-positions = <16 4>;
        };

        collapse {
            bindings = <&kp LG(A)>;
            key-positions = <28 16>;
        };

        ctrl_enter {
            bindings = <&kp LC(ENTER)>;
            key-positions = <17 5>;
        };

        NAV {
            bindings = <&mo 3>;
            key-positions = <29 37>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        RU {
            bindings = <
&ALT_if_CTRL_else_TAB  &lt 5 Q  &kp W  &kp E            &ALTTAB_or_R        &kp T                    &kp Y                    &kp U        &kp I                &kp O    &kp P     &kp LEFT_BRACKET
&ESC_or_TILDA          &lt 2 A  &kp S  &ALT LEFT_ALT D  &kp F               &kp G                    &kp H                    &kp J        &kp K                &kp L    &kp SEMI  &kp SQT
&kp LEFT_GUI           &lt 5 Z  &kp X  &kp C            &SHIFT_ALTTAB_or_V  &kp B                    &kp N                    &kp M        &kp COMMA            &kp DOT  &kp FSLH  &lang_eng
                                       &sk LSHFT        &mt LCTRL ENTER     &SYM_or_tap 0 BACKSPACE  &mt RIGHT_ALT LS(SLASH)  &lt 3 SPACE  &mt RIGHT_GUI SLASH
            >;
        };

        EN {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans           &trans              &trans  &trans                &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans           &trans              &trans  &trans                &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans           &trans              &trans  &trans                &trans  &trans  &lang_ru
                        &trans  &trans  &lt 4 BACKSPACE  &mt LEFT_ALT COMMA  &trans  &mt RIGHT_GUI PERIOD
            >;
        };

        NUM {
            bindings = <
&trans  &trans  &kp KP_NUMBER_7  &kp KP_N8        &kp KP_N9        &kp FSLH         &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_NUMBER_0  &kp N0  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMLOCK   &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
                                 &trans           &trans           &trans           &trans  &trans  &trans
            >;
        };

        NAV {
            bindings = <
&trans  &kp HOME  &kp PG_UP  &kp PG_DN  &kp END    &trans  &trans  &kp HOME  &kp PG_UP  &kp PG_DN  &kp END    &trans
&trans  &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT  &trans  &trans  &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT  &kp RBKT
&trans  &trans    &trans     &trans     &trans     &trans  &trans  &kp BSPC  &del_home  &del_end   &kp DEL    &trans
                             &trans     &trans     &trans  &trans  &trans    &trans
            >;
        };

        SYM {
            bindings = <
&kp PIPE       &kp TILDE        &tog_lang AT_SIGN  &tog_lang HASH  &kp DOLLAR     &tog_lang GRAVE  &kp CARET       &kp QUESTION       &kp AMPERSAND     &kp SQT                &kp DOUBLE_QUOTES     &kp PIPE
&kp GRAVE      &kp EXCLAMATION  &kp AT             &kp HASH        &kp SEMICOLON  &kp PERCENT      &kp COLON       &kp RIGHT_BRACKET  &kp LEFT_BRACKET  &kp RIGHT_PARENTHESIS  &kp LEFT_PARENTHESIS  &trans
&kp BACKSLASH  &kp KP_SLASH     &kp STAR           &kp MINUS       &kp EQUAL      &kp PLUS         &kp UNDERSCORE  &kp RIGHT_BRACE    &kp LEFT_BRACE    &kp GREATER_THAN       &kp LESS_THAN         &trans
                                                   &trans          &trans         &trans           &trans          &trans             &trans
            >;
        };

        F_KEY {
            bindings = <
&trans  &trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans   &trans   &trans   &trans  &trans  &trans
            >;
        };

        adjust_layer {
            bindings = <
&none           &none       &out OUT_TOG  &soft_off     &none  &none        &none           &soft_off     &out OUT_TOG  &bootloader   &none         &bt BT_CLR
&bt BT_CLR_ALL  &bt BT_CLR  &bt BT_SEL 1  &bt BT_SEL 2  &none  &kp K_POWER  &none           &out OUT_TOG  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &none
&none           &none       &none         &none         &none  &none        &studio_unlock  &none         &none         &none         &none         &bt BT_CLR_ALL
                                          &trans        &none  &trans       &trans          &none         &trans
            >;
        };

        layer_8 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        lower_layer {
            bindings = <
&none  &none      &kp NUMBER_3           &kp NUMBER_2         &kp N1                 &kp ASTERISK   &none   &kp EXCLAMATION       &kp AT_SIGN           &kp HASH               &none  &none
&none  &kp EQUAL  &hr NUMBER_6 LEFT_ALT  &hr N5 LEFT_CONTROL  &hr NUMBER_4 LEFT_GUI  &kp KP_DIVIDE  &none   &hr DOLLAR RIGHT_GUI  &hr PERCENT RCTRL     &hr CARET RIGHT_ALT    &none  &none
&none  &kp MINUS  &kp N9                 &kp N8               &kp N7                 &kp N0         &none   &kp AMPERSAND         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none  &none
                                         &lt 6 TAB            &trans                 &trans         &trans  &trans                &lt 6 DEL
            >;
        };

        raise_layer {
            bindings = <
&none  &kp F1  &kp F2   &kp F3   &kp F4   &none      &none      &none     &kp C_VOLUME_DOWN     &kp C_VOLUME_UP  &none            &none
&none  &kp F5  &kp F6   &kp F7   &kp F8   &none      &none      &kp LEFT  &kp DOWN              &kp UP           &kp RIGHT_ARROW  &none
&none  &kp F9  &kp F10  &kp F11  &kp F12  &none      &none      &none     &kp C_BRIGHTNESS_DEC  &kp C_BRI_UP     &none            &none
                        &trans   &trans   &lt 6 RET  &lt 6 ESC  &trans    &trans
            >;
        };
    };
};
